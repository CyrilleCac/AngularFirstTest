'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _startElectron = require('../util/start-electron');

var _startElectron2 = _interopRequireDefault(_startElectron);

var _pathFromCwd = require('../util/path-from-cwd');

var _pathFromCwd2 = _interopRequireDefault(_pathFromCwd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var command = exports.command = 'start --global';
var desc = exports.desc = 'Run the electron application on the current directory whit the locally installed electron or the globally installed electron';

var builder = exports.builder = {
  global: {
    alias: 'g',
    type: 'boolean',
    default: false
  }
};

var handler = exports.handler = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(argv) {
    var script, runGlobal, localPkg, optScript, scriptToRun;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            script = argv.script, runGlobal = argv.global;
            localPkg = require((0, _pathFromCwd2.default)('package.json'));
            optScript = script && (0, _pathFromCwd2.default)(script);


            if (!localPkg.main) {
              console.error(_chalk2.default.red('There is no main file on the package.json'));
            }

            scriptToRun = optScript || (0, _pathFromCwd2.default)(localPkg.main);
            _context.next = 7;
            return (0, _startElectron2.default)(scriptToRun, runGlobal);

          case 7:

            process.exit(0);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function handler(_x) {
    return _ref.apply(this, arguments);
  };
}();