'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _username = require('username');

var _username2 = _interopRequireDefault(_username);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _name = require('../validate/name');

var _name2 = _interopRequireDefault(_name);

var _checkSystem = require('../validate/check-system');

var _checkSystem2 = _interopRequireDefault(_checkSystem);

var _dir = require('../init/dir');

var _dir2 = _interopRequireDefault(_dir);

var _json = require('../init/json');

var _json2 = _interopRequireDefault(_json);

var _git = require('../init/git');

var _git2 = _interopRequireDefault(_git);

var _npm = require('../init/npm');

var _npm2 = _interopRequireDefault(_npm);

var _changeDir = require('../util/change-dir');

var _changeDir2 = _interopRequireDefault(_changeDir);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFile = (0, _denodeify2.default)(require('fs').writeFile);

var command = exports.command = 'init [dir]';
var desc = exports.desc = 'Creates a new electron application';

var builder = exports.builder = {
  dir: {
    default: undefined
  }
};

var handler = exports.handler = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(argv) {
    var initSpinner, request, versions, latest, formatedVersions, questions, _ref2, electronVersion, boilerPlate, rest, dirSpinner, name, createdDir, dependencies, scripts, main;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            initSpinner = (0, _ora2.default)('Getting versions').start();
            _context2.next = 3;
            return (0, _nodeFetch2.default)('https://registry.npmjs.org/electron').then(function (res) {
              return res.json();
            });

          case 3:
            request = _context2.sent;
            versions = (0, _keys2.default)(request.versions);


            versions.sort(function (a, b) {
              return _semver2.default.lt(a, b) ? 1 : -1;
            });

            latest = versions[0];
            formatedVersions = versions.map(function (v) {
              return '(' + v + ')';
            }).join(' ');
            _context2.next = 10;
            return (0, _checkSystem2.default)();

          case 10:
            _context2.t0 = { type: 'input',
              name: 'name',
              message: 'Which name would you like for you proyect',
              validate: _name2.default,
              when: argv.dir === undefined
            };
            _context2.t1 = {
              type: 'input',
              name: 'version',
              message: 'Project version',
              default: '0.0.0',
              validate: function validate(version) {
                return _semver2.default.valid(version) ? true : 'Incorrect version fomat';
              }
            };
            _context2.t2 = {
              type: 'input',
              name: 'license',
              message: 'License',
              default: 'MIT'
            };
            _context2.t3 = {
              type: 'input',
              name: 'description',
              message: 'Description'
            };
            _context2.next = 16;
            return (0, _username2.default)();

          case 16:
            _context2.t4 = _context2.sent;
            _context2.t5 = {
              type: 'input',
              message: 'Author',
              name: 'author',
              default: _context2.t4
            };
            _context2.t6 = {
              type: 'input',
              name: 'electronVersion',
              message: 'What version of electron would you like to install? latest is',
              default: latest,
              validate: function validate(version) {
                return versions.find(function (v) {
                  return v === version;
                }) ? true : 'That version is unavailable available versions ' + formatedVersions;
              }
            };
            _context2.t7 = {
              type: 'confirm',
              name: 'boilerPlate',
              message: 'Would you like to install with the provided boilerplate?',
              when: function when(answers) {
                return answers.electronVersion === latest;
              }
            };
            questions = [_context2.t0, _context2.t1, _context2.t2, _context2.t3, _context2.t5, _context2.t6, _context2.t7];


            initSpinner.succeed();

            _context2.next = 24;
            return _inquirer2.default.prompt(questions);

          case 24:
            _ref2 = _context2.sent;
            electronVersion = _ref2.electronVersion;
            boilerPlate = _ref2.boilerPlate;
            rest = (0, _objectWithoutProperties3.default)(_ref2, ['electronVersion', 'boilerPlate']);
            dirSpinner = (0, _ora2.default)('Initializing Directory').start();
            name = argv.dir || rest.name;
            _context2.next = 32;
            return (0, _dir2.default)(name);

          case 32:
            createdDir = _context2.sent;
            dependencies = { electron: '^' + electronVersion };
            scripts = { start: 'electron .' };
            main = 'main.js';

            if (!boilerPlate) {
              _context2.next = 38;
              break;
            }

            return _context2.delegateYield(_regenerator2.default.mark(function _callee() {
              var filesToDownload, fileNames, fileContent;
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      filesToDownload = ['https://raw.githubusercontent.com/Ikana/electron-cli/master/templates/main.js', 'https://raw.githubusercontent.com/Ikana/electron-cli/master/templates/index.html', 'https://raw.githubusercontent.com/Ikana/electron-cli/master/templates/.gitignore'];
                      fileNames = filesToDownload.map(function (f) {
                        return f.split('/').pop();
                      });
                      _context.next = 4;
                      return _promise2.default.all(filesToDownload.map(function (f) {
                        return (0, _nodeFetch2.default)(f).then(function (r) {
                          return r.text();
                        });
                      }));

                    case 4:
                      fileContent = _context.sent;
                      _context.next = 7;
                      return fileNames.map(function (el, index) {
                        return writeFile(_path2.default.join(createdDir, el), fileContent[index], 'utf8');
                      });

                    case 7:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, undefined);
            })(), 't8', 38);

          case 38:
            _context2.next = 40;
            return (0, _json2.default)(createdDir, (0, _extends3.default)({ name: name, dependencies: dependencies, scripts: scripts, main: main }, rest));

          case 40:
            _context2.next = 42;
            return (0, _changeDir2.default)(createdDir);

          case 42:
            _context2.next = 44;
            return (0, _git2.default)();

          case 44:
            _context2.next = 46;
            return (0, _npm2.default)();

          case 46:

            dirSpinner.succeed();

            console.log(_chalk2.default.green('To start enter the ' + name + ' directory, then you can run npm start to run your electron application'));

          case 48:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function handler(_x) {
    return _ref.apply(this, arguments);
  };
}();