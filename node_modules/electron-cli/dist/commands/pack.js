'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _pack = require('../util/pack');

var _pack2 = _interopRequireDefault(_pack);

var _pathFromCwd = require('../util/path-from-cwd');

var _pathFromCwd2 = _interopRequireDefault(_pathFromCwd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var command = exports.command = 'pack';
var desc = exports.desc = 'Pack an electron application';
var packager = (0, _denodeify2.default)(require('electron-packager'));

var builder = exports.builder = {};

var handler = exports.handler = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(argv) {
    var _require, version, dependencies;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.log(_os2.default.arch());
            console.log(_os2.default.platform());
            _require = require((0, _pathFromCwd2.default)('package.json')), version = _require.version, dependencies = _require.dependencies;
            _context.next = 5;
            return packager({
              dir: process.cwd(),
              version: _semver2.default.clean(dependencies.electron),
              arch: _os2.default.arch(),
              platform: _os2.default.platform()
            });

          case 5:

            process.exit();

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function handler(_x) {
    return _ref.apply(this, arguments);
  };
}();