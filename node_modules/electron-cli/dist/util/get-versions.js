'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.default = function () {
  return new _promise2.default(function (resolve, reject) {
    (0, _resolve2.default)('electron', {
      basedir: process.cwd()
    }, function (error, localElectron) {
      if (error) {
        reject('No local electron found');
      } else {
        console.log(_chalk2.default.green('Local Electron found'));
        resolve(require(localElectron));
      }
    });
  }).then(function (el) {
    return getVersion(el);
  });
};

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var exec = (0, _denodeify2.default)(require('child_process').exec);

function getVersion(electron) {
  var verPath = _path2.default.join(__dirname, 'version.js');
  return exec(electron + ' ' + verPath).then(function (out) {
    return JSON.parse(out);
  });
}